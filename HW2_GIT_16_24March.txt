GIT HW2 Heinrich Borisow

Описание задания.

 1 уровень сложности:

1.Как отказаться от изменений в файле (файлах) находящийся в рабочем каталоге (work directory)?
2.Как вернуть файл из индекса в рабочий каталог?
3.Как отменить ошибочный commit ?
4.Как создать новую ветку и переключится в нее?
5.В чем отличение между fast-forward merge  and non fast-forfard merge?
6.Когда может возникнуть конфликт слияния веток, как  его разрешить?
7.Можно ли удалить ветку? Как? 

В ответах на вопросы 1-4, 7 необходимо указать конкретные команда git. 
На 5 и 6 вопросы дать объяснение своими словами.

==================

Решение

1. Чтобы отказаться от изменений в файле в рабочем каталоге, нужно выполнить команду:
git checkout -- <filename> // <filename> - имя файла, который нужно отменить изменения.


2. Чтобы вернуть файл из индекса в рабочий каталог, нужно выполнить команду:
git reset HEAD <filename> //<filename> - имя файла, который нужно вернуть в рабочий каталог.

3. Чтобы отменить ошибочный commit, можно воспользоваться командой git revert.
git revert создает новый коммит, который отменяет изменения, внесенные указанным коммитом. При этом, история изменений оригинальной ветки остается неизменной, но в нее добавляется новый коммит, который отменяет изменения указанного коммита.
Для отмены коммита нужно выполнить команду git revert <commit-hash>, где <commit-hash> - это хэш коммита, который нужно отменить. найти хэш нужного - git log.
После выполнения команды git revert, Git откроет редактор, где вы можно ввести комментарий для нового коммита. Если это не нужно, просто закрываем редактор без сохранения. Альтернатива -  опция -n или --no-edit к команде git commit.

4.Чтобы создать новую ветку в Git и переключиться в нее, можно использовать команду git checkout с опцией -b. Эта команда создаст новую ветку и автоматически переключит вас на нее.
Например, чтобы создать ветку с именем "newfeat" и переключиться на нее, используем следующую команду:
git checkout -b newfeat
После выполнения этой команды мы находимся в новой ветке "newfeat". 

5. Fast-forward merge и non-fast-forward merge - это два разных способа слияния веток в Git.
Fast-forward merge (слияние с быстрым перемещением) - это слияние веток, которое происходит, когда текущая ветка (например, ветка feature) исходит от коммита, на котором находится целевая ветка (например, ветка master). То есть, изменения, внесенные в ветку feature, не конфликтуют с изменениями в ветке master. При слиянии Git просто перемещает указатель ветки master на последний коммит в ветке feature, и это называется fast-forward слиянием.

Non-fast-forward merge (слияние без быстрого перемещения) - это слияние веток, которое происходит, когда ветка feature имеет общие изменения с веткой master, и не может быть просто перемещена. В этом случае Git создает новый коммит с объединением изменений из обеих веток. Таким образом, создается новый коммит, который объединяет изменения из обеих веток, и это называется non-fast-forward слиянием.

B некоторых случаях Git автоматически выполняет fast-forward merge, а в некоторых - non-fast-forward merge, в зависимости от настроек и конфигурации. Можно указать, какой тип слияния использовать, используя опцию --no-ff при выполнении команды git merge.

6. Конфликт слияния веток может возникнуть, когда две ветки содержат изменения в одних и тех же строках кода. В этом случае Git не может автоматически выполнить слияние, так как не может определить, какие изменения следует сохранить и какие отбросить.

Для разрешения конфликта слияния веток в Git нужно выполнить следующие шаги:

Выполнить команду git merge для слияния веток.
Git выведет сообщение о том, что произошел конфликт слияния веток, и указывает, в каком файле произошел конфликт.
Открыть конфликтующий файл в редакторе кода и найти места, где произошли конфликты.
В редакторе кода отметить конфликтующие строки и разрешить конфликты, удалив ненужные строки или сохраняя нужные изменения.
Сохранить изменения в файле и закрыть редактор кода.
Выполнить команду git add для добавления измененных файлов в индекс.
Выполнить команду git commit для создания нового коммита, который разрешит конфликт слияния веток.
Сохранить сообщение коммита и закрыть редактор сообщений.
Выполнить команду git push, чтобы отправить изменения на удаленный репозиторий.

7. В Git можно удалить ветку. Для этого нужно выполнить команду git branch с опцией -d или -D, указав имя удаляемой ветки.
Опция -d используется для удаления веток, которые уже были слиты с текущей веткой, и не содержат изменений, которые не включены в текущую ветку. Если ветка содержит изменения, которые еще не включены в другие ветки, то Git выведет предупреждение и не позволит удалить эту ветку при использовании опции -d.

Опция -D (заглавная D) используется для принудительного удаления ветки, даже если она содержит изменения, которые еще не включены в другие ветки. Использование опции -D приведет к потере изменений, которые были внесены в эту ветку.

Например, для удаления ветки feature необходимо выполнить команду:
git branch -d feature

Если необходимо принудительно удалить ветку feature, можно использовать опцию -D:
git branch -D feature



















